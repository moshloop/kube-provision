#!/bin/bash
# ARG_OPTIONAL_SINGLE([cluster-name],[n],[cluster name, must be unique])
# ARG_OPTIONAL_BOOLEAN([bootstrap-master],[],[Whether to create a new primary master],[on])
# ARG_OPTIONAL_SINGLE([workers],[w],[number of worker nodes],[3])
# ARG_OPTIONAL_SINGLE([masters],[m],[number of secondary worker modes],[3])
# ARG_OPTIONAL_SINGLE([config],[c],[Config file with options],[])
# ARG_OPTIONAL_SINGLE([host-prefix],[p],[prefix to add to every hostname],[])
# ARG_OPTIONAL_SINGLE([master-label],[],[Label to add to all masters],[m-])
# ARG_OPTIONAL_SINGLE([secondary-label],[],[Label to add to all secondary masters],[s-])
# ARG_OPTIONAL_SINGLE([worker-label],[],[Label to add to all worker nodes],[w-])
# ARG_OPTIONAL_SINGLE([consul-ip],[],[The IP address of consul to use for master discovery, if not specified a new consul server will be created],[])
# ARG_OPTIONAL_REPEATED([extra],[e],[set additional variables as key=value or YAML/JSON, if filename prepend with @],[])
# ARG_OPTIONAL_SINGLE([host-suffix-format],[],[Date format to use as the suffix for each host],[+%m%d%H%M%S])
# ARG_OPTIONAL_SINGLE([provisioner],[],[The provisioner to use when launching instances],[ansible-provision])
# ARG_OPTIONAL_BOOLEAN([debug],[],[boolean optional argument help msg])
# ARG_OPTIONAL_SINGLE([k8s-version],[],[The version of k8s to deploy])
# ARG_HELP([])
#start_region
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
#end_region


ARGS=

for e in "${extra[@]}"; do
  ARGS+=" -e $e"
done

logv "Verbose log"

k8s_version=${k8s_version:-v1.13.2}

LOCAL_IP=$(ifconfig | sed -n 's/.*inet addr:\([0-9.]\+\)\s.*/\1/p' |grep -v 127.0.0.1)

[[ "$cluster_name" == "" ]] && die "Must specify --cluster-name"
[[ "$config" != "" ]] && ARGS+=" --config $config"
[[ "$debug" != "" ]] && ARGS+=" --debug"

[[ "$consul_ip" == "" ]] && consul_ip=$($provisioner --hostname consul-server --group consul --print-ip $ARGS)

[[ "$consul_ip" == "" ]] && die "Failed to provision consul"

ARGS+=" -e consul_ip=$consul_ip -e consul_server_http=$consul_ip:8500"

log "Creating new cluster $cluster_name:$k8s_version with masters:$masters and workers:$workers, consul:$consul_ip"
mkdir -p $PWD/$cluster_name
kubeadm init phase certs all \
   --cert-dir $PWD/$cluster_name/certs \
   --apiserver-cert-extra-sans "localhost" \
   --apiserver-cert-extra-sans "127.0.0.1"

token=$(kubeadm token generate)
if [[ -e $cluster_name/bootstrap_token ]]; then
  token=$(cat $cluster_name/bootstrap_token)
else
  echo $token > $cluster_name/bootstrap_token
fi

ARGS+=" -e token=$token -e cluster_name=$cluster_name -e kubernetes_version=${k8s_version}"

if [[ "$masters" -gt 0 ]]; then
  master_ip=$($provisioner --host-prefix ${host_prefix}${master_label}${cluster_name} \
             --group primary-master \
             --print-ip $ARGS)
  echo $master_ip > $cluster_name/master_ip
  log "Provisioned master node: $master_ip"
fi
master_ip=$(cat $cluster_name/master_ip)

[[ "$master_ip" == "" ]] && die "Failed to provision master or retrieve ip"
export KUBECONFIG=$PWD/$cluster_name/admin.conf

if [[ ! -e $KUBECONFIG ]]; then
  kubeadm init phase kubeconfig admin --cert-dir $PWD/$cluster_name/certs --apiserver-advertise-address $master_ip  --kubeconfig-dir $PWD/$cluster_name
fi

# [[ -e deploy.sh ]] && ./deploy.sh
secondary_masters=$(expr $masters - 1)

log "Provisioning $secondary_masters secondary masters "
if [[  "$secondary_masters" -gt 0 ]]; then
  for i in $(seq 1 $secondary_masters); do
    $provisioner --group secondary-master \
                 --host-prefix ${host_prefix}${secondary_label}${cluster_name} \
                 $ARGS
  done
fi
log "Provisioning $workers workers"
if [[ "$workers" -gt 0 ]]; then
  for i in $(seq 1 $workers); do
    $provisioner --group worker \
                 --host-prefix ${host_prefix}${worker_label}${cluster_name} \
                 $ARGS
  done
fi
# ] <-- needed because of Argbash
